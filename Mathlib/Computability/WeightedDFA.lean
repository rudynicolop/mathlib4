/-
Copyright (c) 2025 Rudy Peterson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Rudy Peterson
-/
import Mathlib.Computability.Language
import Mathlib.Algebra.Ring.Defs
import Mathlib.Computability.WeightedPath

/-!
# Weighted Deterministic Finite Automata

TODO: explain stuff.
-/

universe k u v

open Computability

/-- A Weighted DFA (`ùìê`) over a semiring (`ùì¶ = (Œ∫, ‚äï, ‚äó, 0, 1)`)
is a 5-tuple (`(Œ±, œÉ, step, start, final)`) where
* (`Œ±`) is a (finite) alphabet.
* (`œÉ`) is a (finite) set of states.
* (`step : œÉ ‚Üí Œ± ‚Üí œÉ √ó Œ∫`) is a (finite) set of transitions.
* (`start : œÉ √ó Œ∫`) the start state and its weight.
* (`final : œÉ ‚Üí Œ∫`) is a weighting function assigning states their final values.
-/
structure WDFA (Œ± : Type u) (œÉ : Type v) (Œ∫ : Type k) where
  /-- A transition function from state to state labelled by the alphabet producing a weight.  -/
  step : œÉ ‚Üí Œ± ‚Üí œÉ √ó Œ∫
  /-- Starting state and weight. -/
  start : œÉ √ó Œ∫
  /-- Final weights. -/
  final : œÉ ‚Üí Œ∫

namespace WDFA

variable {Œ± : Type u} {œÉ : Type v} {Œ∫ : Type k} (M : WDFA Œ± œÉ Œ∫) [W : Semiring Œ∫]

instance [Inhabited œÉ] [Inhabited Œ∫] : Inhabited (WDFA Œ± œÉ Œ∫) :=
‚ü®WDFA.mk (fun _ _ => ‚ü®default, default‚ü©) ‚ü®default, default‚ü© (fun _ ‚Ü¶ 0)‚ü©

def PathInWDFA {s‚ÇÅ s‚ÇÉ : œÉ} : WeightedPath Œ± Œ∫ s‚ÇÅ s‚ÇÉ ‚Üí Prop :=
  WeightedPath.All (fun q‚ÇÅ a w q‚ÇÇ ‚Ü¶ M.step q‚ÇÅ a = (q‚ÇÇ, w))

def AcceptingPathInWDFA {s‚ÇÅ s‚ÇÇ : œÉ} (œÄ : WeightedPath Œ± Œ∫ s‚ÇÅ s‚ÇÇ) (w : Œ∫) : Prop :=
  s‚ÇÅ = M.start.1 ‚àß
  M.PathInWDFA œÄ ‚àß
  w = M.start.2 * œÄ.innerWeight * M.final s‚ÇÇ

/--
`M.evalFromL s x` evaluates `M` with input `x` starting from
the state `s` left-associatively.
-/
def evalFromL : œÉ √ó Œ∫ ‚Üí List Œ± ‚Üí œÉ √ó Œ∫ :=
  List.foldl (fun sw a ‚Ü¶ Prod.map id (W.mul sw.2) (M.step sw.1 a))

@[simp]
lemma evalFromL_nil (sw : œÉ √ó Œ∫) : M.evalFromL sw [] = sw := rfl

@[simp]
lemma evalFromL_singleton (sw : œÉ √ó Œ∫) (a : Œ±) :
  M.evalFromL sw [a] = Prod.map id (W.mul sw.2) (M.step sw.1 a) := rfl

@[simp]
lemma evalFromL_append_singleton (sw : œÉ √ó Œ∫) (x : List Œ±) (a : Œ±) :
  M.evalFromL sw (x ++ [a]) =
  Prod.map id (W.mul (M.evalFromL sw x).2) (M.step (M.evalFromL sw x).1 a) := by
  simp only [evalFromL, List.foldl_append, List.foldl_cons, List.foldl_nil]

@[simp]
lemma evalFromL_cons (sw : œÉ √ó Œ∫) (a : Œ±) (x : List Œ±) :
  M.evalFromL sw (a :: x) = M.evalFromL (Prod.map id (W.mul sw.2) (M.step sw.1 a)) x := by
  simp only [evalFromL, List.foldl_cons]

lemma evalFromL_append (sw : œÉ √ó Œ∫) (x y : List Œ±) :
  M.evalFromL sw (x ++ y) = M.evalFromL (M.evalFromL sw x) y := by
  simp only [evalFromL, List.foldl_append]

/-- `M.eval x` evaluates `M` with input `x` starting from the state `M.start`. -/
def eval : List Œ± ‚Üí œÉ √ó Œ∫ :=
  M.evalFromL M.start

@[simp]
lemma eval_nil : M.eval [] = M.start := rfl

@[simp]
lemma eval_singleton (a : Œ±) : M.eval [a] = Prod.map id (W.mul M.start.2) (M.step M.start.1 a) := by
  simp only [eval, evalFromL_singleton]

@[simp]
lemma eval_append_singleton (x : List Œ±) (a : Œ±) :
  M.eval (x ++ [a]) = Prod.map id (W.mul (M.eval x).2) (M.step (M.eval x).1 a) := by
  simp only [eval, evalFromL_append_singleton]

end WDFA
